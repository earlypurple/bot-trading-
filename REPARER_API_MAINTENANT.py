#!/usr/bin/env python3
"""
üîß R√âPARATION IMM√âDIATE DES CL√âS API COINBASE
Solution rapide pour Johan - nettoyage des caract√®res sp√©ciaux
"""

import os
import re

def main():
    print("üîß R√âPARATION CL√âS API COINBASE")
    print("=" * 50)
    
    # VOS CL√âS DONN√âES PAR JOHAN
    api_key = "7bb7aaf0-8571-44ee-90cb-fa485597d0e8"
    
    # Nettoyage de la cl√© secr√®te - retrait des caract√®res sp√©ciaux
    secret_raw = """-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEID8hv4KFza4u5TdKTJZ756KlN0JUqwBPViMFynUyNkhRoAoGCCqGSM49\nAwEHoUQDQgAEmGfueWxK4Ie/9T5o5HAgUqISxo5+ZgXHiE6/DRVk1F9mlDQT8kIh\n/kwtdZERNu52cX1WX0Est83oxc2O4ThTTQ==\n-----END EC PRIVATE KEY-----\n"""
    
    # M√©thode 1: Nettoyage complet (retire tout sauf alphanum√©riques et +/=)
    secret_clean = re.sub(r'[^A-Za-z0-9+/=]', '', secret_raw)
    print(f"üßπ Cl√© nettoy√©e (m√©thode 1): {secret_clean[:50]}...")
    
    # M√©thode 2: Garde juste la partie base64
    secret_base64 = re.search(r'-----BEGIN EC PRIVATE KEY-----\n(.*?)\n-----END EC PRIVATE KEY-----', secret_raw.replace('\\n', '\n'), re.DOTALL)
    if secret_base64:
        secret_content = secret_base64.group(1).replace('\n', '').replace('\\n', '')
        print(f"üéØ Cl√© base64 pure: {secret_content[:50]}...")
    else:
        secret_content = secret_clean
    
    # M√©thode 3: Garde le format PEM mais nettoie
    secret_pem = secret_raw.replace('\\n', '\n')
    print(f"üìù Cl√© PEM format√©e: {secret_pem[:80].replace(chr(10), ' ')}...")
    
    # Test avec les 3 versions
    print("\nüß™ TEST DES 3 VERSIONS DE CL√âS...")
    
    try:
        import ccxt
        
        # Version 1: Cl√© compl√®tement nettoy√©e
        print("\n1Ô∏è‚É£ Test cl√© nettoy√©e compl√®te...")
        try:
            exchange1 = ccxt.coinbase({
                'apiKey': api_key,
                'secret': secret_clean,
                'sandbox': False,
                'enableRateLimit': True,
            })
            balance1 = exchange1.fetch_balance()
            print("‚úÖ VERSION 1 FONCTIONNE!")
            save_working_config(api_key, secret_clean, "nettoy√©e")
            return
        except Exception as e:
            print(f"‚ùå Version 1 √©choue: {str(e)[:100]}")
        
        # Version 2: Base64 pur
        print("\n2Ô∏è‚É£ Test base64 pur...")
        try:
            exchange2 = ccxt.coinbase({
                'apiKey': api_key,
                'secret': secret_content,
                'sandbox': False,
                'enableRateLimit': True,
            })
            balance2 = exchange2.fetch_balance()
            print("‚úÖ VERSION 2 FONCTIONNE!")
            save_working_config(api_key, secret_content, "base64")
            return
        except Exception as e:
            print(f"‚ùå Version 2 √©choue: {str(e)[:100]}")
        
        # Version 3: PEM format√©
        print("\n3Ô∏è‚É£ Test PEM format√©...")
        try:
            exchange3 = ccxt.coinbase({
                'apiKey': api_key,
                'secret': secret_pem,
                'sandbox': False,
                'enableRateLimit': True,
            })
            balance3 = exchange3.fetch_balance()
            print("‚úÖ VERSION 3 FONCTIONNE!")
            save_working_config(api_key, secret_pem, "PEM")
            return
        except Exception as e:
            print(f"‚ùå Version 3 √©choue: {str(e)[:100]}")
        
        # Version 4: Cl√© brute sans modification
        print("\n4Ô∏è‚É£ Test cl√© brute...")
        try:
            exchange4 = ccxt.coinbase({
                'apiKey': api_key,
                'secret': secret_raw,
                'sandbox': False,
                'enableRateLimit': True,
            })
            balance4 = exchange4.fetch_balance()
            print("‚úÖ VERSION 4 FONCTIONNE!")
            save_working_config(api_key, secret_raw, "brute")
            return
        except Exception as e:
            print(f"‚ùå Version 4 √©choue: {str(e)[:100]}")
            
        print("\nüí° ESSAI AVEC COINBASEADVANCED...")
        # Test avec coinbaseadvanced
        try:
            exchange_adv = ccxt.coinbaseadvanced({
                'apiKey': api_key,
                'secret': secret_clean,
                'sandbox': False,
                'enableRateLimit': True,
            })
            balance_adv = exchange_adv.fetch_balance()
            print("‚úÖ COINBASEADVANCED FONCTIONNE!")
            save_working_config(api_key, secret_clean, "advanced")
            return
        except Exception as e:
            print(f"‚ùå CoinbaseAdvanced √©choue: {str(e)[:100]}")
        
    except ImportError:
        print("‚ùå Erreur: ccxt non install√©")
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
    
    print("\n‚ùå AUCUNE VERSION NE FONCTIONNE")
    print("üí° Les cl√©s peuvent √™tre invalides ou inactives")

def save_working_config(api_key, secret, version):
    """Sauvegarde la configuration qui fonctionne"""
    config_content = f'''# Configuration API Coinbase FONCTIONNELLE
# Version qui marche: {version}

API_CONFIG = {{
    'coinbase_api_key': '{api_key}',
    'coinbase_api_secret': '{secret}',
}}

print("üéâ Configuration {version} charg√©e avec succ√®s!")
'''
    
    # Sauvegarde dans plusieurs fichiers
    files = [
        'CONFIGURER_API_COINBASE.py',
        '/Users/johan/ia_env/bot-trading-/CONFIGURER_API_COINBASE.py',
        '/Users/johan/ia_env/bot-trading-/TradingBot_Pro_2025/CONFIGURER_API_COINBASE.py'
    ]
    
    for file_path in files:
        try:
            with open(file_path, 'w') as f:
                f.write(config_content)
            print(f"‚úÖ Sauvegard√©: {file_path}")
        except:
            pass
    
    print(f"\nüéØ CONFIGURATION {version.upper()} SAUVEGARD√âE!")
    print("üöÄ Vous pouvez maintenant lancer le dashboard!")

if __name__ == "__main__":
    main()
