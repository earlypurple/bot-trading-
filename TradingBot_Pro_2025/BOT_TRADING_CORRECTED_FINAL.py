#!/usr/bin/env python3
"""
üéØ BOT TRADING FINAL CORRIG√â
Solution pour l'erreur "account is not available"
"""
import os
import sys
import json
import time
import threading
import webbrowser
import random
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler

print("üéØ D√âMARRAGE BOT TRADING FINAL CORRIG√â...")

try:
    import ccxt
    print("‚úÖ Module ccxt import√©")
except ImportError as e:
    print(f"‚ùå ERREUR ccxt: {e}")
    sys.exit(1)

class CorrectedTradingBot:
    """Bot de trading avec correction du probl√®me de compte"""
    
    def __init__(self):
        print("üîß Initialisation bot corrig√©...")
        self.exchange = None
        self.is_connected = False
        self.portfolio = {}
        self.prices = {}
        self.current_mode = "micro"
        self.auto_trading_active = False
        self.trades_history = []
        self.logs = []
        self.log_file = "TRADING_CORRECTED.log"
        self.trading_account_id = None  # ID du compte de trading
        
        # Modes de trading
        self.trading_modes = {
            "micro": {
                "name": "Micro Trading",
                "description": "Trading ultra-s√©curis√© avec petits montants",
                "min_amount": 1.0,
                "max_amount": 3.0,
                "frequency_seconds": 900,
                "risk_level": "Tr√®s Faible",
                "profit_target": 0.5,
                "max_trades_per_hour": 4
            },
            "conservateur": {
                "name": "Mode Conservateur", 
                "description": "Trading prudent avec risque minimal",
                "min_amount": 2.0,
                "max_amount": 5.0,
                "frequency_seconds": 600,
                "risk_level": "Faible",
                "profit_target": 1.0,
                "max_trades_per_hour": 6
            },
            "equilibre": {
                "name": "Mode √âquilibr√©",
                "description": "Balance entre s√©curit√© et profit",
                "min_amount": 3.0,
                "max_amount": 8.0,
                "frequency_seconds": 300,
                "risk_level": "Mod√©r√©", 
                "profit_target": 1.5,
                "max_trades_per_hour": 8
            },
            "dynamique": {
                "name": "Mode Dynamique",
                "description": "Trading actif avec plus d'opportunit√©s",
                "min_amount": 5.0,
                "max_amount": 12.0,
                "frequency_seconds": 180,
                "risk_level": "√âlev√©",
                "profit_target": 2.0,
                "max_trades_per_hour": 12
            },
            "agressif": {
                "name": "Mode Agressif",
                "description": "Trading maximum pour profits √©lev√©s",
                "min_amount": 8.0,
                "max_amount": 20.0,
                "frequency_seconds": 120,
                "risk_level": "Tr√®s √âlev√©",
                "profit_target": 3.0,
                "max_trades_per_hour": 20
            }
        }
        
        self.setup_api()
        
    def log_message(self, message, category="INFO"):
        """Syst√®me de logs am√©lior√©"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"üìù [{category}] {message}"
        print(log_entry)
        
        self.logs.append({
            "timestamp": timestamp,
            "category": category,
            "message": message
        })
        
        # Sauvegarder dans le fichier
        try:
            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(f"{timestamp} [{category}] {message}\n")
        except:
            pass
    
    def setup_api(self):
        """Configuration API avec d√©tection automatique du compte"""
        self.log_message("D√©marrage bot corrig√©", "INIT")
        
        try:
            # Charger la configuration
            with open('cdp_api_key.json', 'r') as f:
                config = json.load(f)
            
            self.log_message("Configuration API...", "API")
            
            # Configurer l'exchange
            self.exchange = ccxt.coinbaseadvanced({
                'apiKey': config['name'],
                'secret': config['privateKey'],
                'passphrase': '',
                'sandbox': False,
                'enableRateLimit': True,
                'options': {
                    'createMarketBuyOrderRequiresPrice': False,
                }
            })
            
            api_key_short = config['name'][:20] + "..."
            self.log_message(f"API: {api_key_short}", "API")
            
            # NOUVEAU: Identifier le compte de trading automatiquement
            self.find_trading_account()
            
            self.log_message("Exchange connect√© avec succ√®s", "API")
            
            # Test de connexion
            balance = self.exchange.fetch_balance()
            self.log_message("Test connexion r√©ussi", "API")
            
            self.is_connected = True
            self.log_message("Initialisation compl√®te r√©ussie", "INIT")
            
        except Exception as e:
            self.log_message(f"Erreur API: {e}", "ERROR")
            self.is_connected = False
    
    def find_trading_account(self):
        """Trouve automatiquement le compte de trading appropri√©"""
        try:
            self.log_message("Recherche compte de trading...", "ACCOUNT")
            
            # R√©cup√©rer tous les comptes
            accounts = self.exchange.fetch_accounts()
            self.log_message(f"Comptes trouv√©s: {len(accounts)}", "ACCOUNT")
            
            # Chercher un compte avec des fonds USDC
            usdc_accounts = []
            for account in accounts:
                if account.get('currency') == 'USD' or account.get('currency') == 'USDC':
                    balance = float(account.get('total', 0))
                    if balance > 1.0:  # Au moins 1$ disponible
                        usdc_accounts.append(account)
                        self.log_message(f"Compte trouv√©: {account.get('id', '')[:10]}... - {balance} {account.get('currency')}", "ACCOUNT")
            
            if usdc_accounts:
                # Utiliser le premier compte avec des fonds
                self.trading_account_id = usdc_accounts[0].get('id')
                self.log_message(f"Compte de trading s√©lectionn√©: {self.trading_account_id[:10]}...", "ACCOUNT")
            else:
                self.log_message("Aucun compte USDC trouv√© avec des fonds", "WARNING")
                
        except Exception as e:
            self.log_message(f"Erreur recherche compte: {e}", "ERROR")
    
    def get_portfolio(self):
        """R√©cup√©rer le portefeuille"""
        if not self.is_connected:
            return {}
        
        try:
            balance = self.exchange.fetch_balance()
            
            portfolio = {}
            for currency, amounts in balance.items():
                if isinstance(amounts, dict) and amounts.get('total', 0) > 0:
                    portfolio[currency] = {
                        'free': amounts.get('free', 0),
                        'used': amounts.get('used', 0),  
                        'total': amounts.get('total', 0)
                    }
            
            self.portfolio = portfolio
            return portfolio
            
        except Exception as e:
            self.log_message(f"Erreur portfolio: {e}", "ERROR")
            return {}
    
    def get_current_prices(self):
        """R√©cup√©rer les prix actuels"""
        if not self.is_connected:
            return {}
        
        try:
            symbols = ['BTC/USD', 'ETH/USD', 'SOL/USD', 'ATOM/USD']
            prices = {}
            
            for symbol in symbols:
                try:
                    ticker = self.exchange.fetch_ticker(symbol)
                    prices[symbol] = ticker['last']
                except:
                    prices[symbol] = 0
            
            self.prices = prices
            return prices
            
        except Exception as e:
            self.log_message(f"Erreur prix: {e}", "ERROR")
            return {}
    
    def execute_trade_corrected(self, symbol, side, amount_usd):
        """Ex√©cution d'ordre corrig√©e pour √©viter l'erreur account not available"""
        try:
            self.log_message(f"D√©but trade {side} {symbol} ${amount_usd}", "TRADE_START")
            
            # R√©cup√©rer le prix actuel
            ticker = self.exchange.fetch_ticker(symbol)
            price = ticker['last']
            self.log_message(f"Prix {symbol}: ${price:.2f}", "TRADE_INFO")
            
            # Calculer la quantit√© √† acheter
            if side == 'buy':
                amount_crypto = amount_usd / price
            else:
                amount_crypto = amount_usd
            
            # SOLUTION CORRIG√âE: Utiliser 'quoteOrderQty' dans params pour market buy
            if side == 'buy':
                # Pour les ordres d'achat market, utiliser quoteOrderQty dans params
                result = self.exchange.create_order(
                    symbol=symbol,
                    type='market',
                    side='buy',
                    amount=amount_crypto,  # Quantit√© en crypto calcul√©e
                    params={
                        'quoteOrderQty': amount_usd  # Montant en USD dans params
                    }
                )
            else:
                # Pour les ordres de vente, utiliser amount normalement  
                result = self.exchange.create_order(
                    symbol=symbol,
                    type='market',
                    side='sell',
                    amount=amount_crypto,
                    params={}
                )
            
            self.log_message(f"Trade r√©ussi: {result.get('id', 'N/A')}", "TRADE_SUCCESS")
            
            # Ajouter √† l'historique
            trade_record = {
                'timestamp': datetime.now().isoformat(),
                'symbol': symbol,
                'side': side,
                'amount': amount_crypto,
                'cost': amount_usd,
                'price': price,
                'status': 'success',
                'mode': self.current_mode
            }
            self.trades_history.append(trade_record)
            
            return True
            
        except Exception as e:
            error_msg = str(e)
            self.log_message(f"√âchec trade: {error_msg}", "TRADE_ERROR")
            
            # Analyser l'erreur et proposer des solutions
            if "account is not available" in error_msg.lower():
                self.log_message("SOLUTION: V√©rifier les permissions API et l'activation du trading", "SOLUTION")
            elif "insufficient" in error_msg.lower():
                self.log_message("SOLUTION: Fonds insuffisants, r√©duire le montant", "SOLUTION")
            elif "minimum" in error_msg.lower():
                self.log_message("SOLUTION: Montant en dessous du minimum requis", "SOLUTION")
            
            # Ajouter √† l'historique avec erreur
            trade_record = {
                'timestamp': datetime.now().isoformat(),
                'symbol': symbol,
                'side': side,
                'amount': 0,
                'cost': amount_usd,
                'price': 0,
                'status': 'failed',
                'error': error_msg,
                'mode': self.current_mode
            }
            self.trades_history.append(trade_record)
            
            return False
    
    def auto_trading_loop(self):
        """Boucle de trading automatique"""
        self.log_message("Auto-trading d√©marr√© en mode " + self.current_mode, "AUTO_START")
        
        trades_this_hour = 0
        last_hour = datetime.now().hour
        
        while self.auto_trading_active:
            try:
                # Reset compteur si nouvelle heure
                current_hour = datetime.now().hour
                if current_hour != last_hour:
                    trades_this_hour = 0
                    last_hour = current_hour
                
                mode_config = self.trading_modes[self.current_mode]
                max_trades = mode_config['max_trades_per_hour']
                
                # V√©rifier limite d'ordres par heure
                if trades_this_hour >= max_trades:
                    self.log_message(f"Limite atteinte: {trades_this_hour}/{max_trades} trades/heure", "AUTO_LIMIT")
                    time.sleep(300)  # Attendre 5 minutes
                    continue
                
                # S√©lectionner symbole et montant al√©atoirement
                symbols = ['SOL/USD', 'ATOM/USD', 'ETH/USD']
                symbol = random.choice(symbols)
                
                min_amount = mode_config['min_amount']
                max_amount = mode_config['max_amount']
                amount = round(random.uniform(min_amount, max_amount), 2)
                
                # Ex√©cuter le trade
                success = self.execute_trade_corrected(symbol, 'buy', amount)
                
                if success:
                    trades_this_hour += 1
                    self.log_message(f"Auto-trade r√©ussi ({trades_this_hour}/{max_trades})", "AUTO_SUCCESS")
                else:
                    self.log_message("Trade auto √©chou√©", "AUTO_ERROR")
                
                # Attendre avant le prochain trade
                wait_time = mode_config['frequency_seconds']
                time.sleep(wait_time)
                
            except Exception as e:
                self.log_message(f"Erreur auto-trading: {e}", "AUTO_ERROR")
                time.sleep(60)
    
    def start_auto_trading(self):
        """D√©marrer le trading automatique"""
        if not self.auto_trading_active:
            self.auto_trading_active = True
            threading.Thread(target=self.auto_trading_loop, daemon=True).start()
            return True
        return False
    
    def stop_auto_trading(self):
        """Arr√™ter le trading automatique"""
        if self.auto_trading_active:
            self.auto_trading_active = False
            self.log_message("Auto-trading arr√™t√©", "AUTO_STOP")
            return True
        return False
    
    def get_performance_stats(self):
        """Statistiques de performance"""
        if not self.trades_history:
            return {
                'total_trades': 0,
                'successful_trades': 0,
                'success_rate': 0.0,
                'total_invested': 0.0,
                'estimated_profit': 0.0
            }
        
        total_trades = len(self.trades_history)
        successful_trades = len([t for t in self.trades_history if t.get('status') == 'success'])
        success_rate = (successful_trades / total_trades) * 100 if total_trades > 0 else 0
        
        total_invested = sum(t.get('cost', 0) for t in self.trades_history if t.get('status') == 'success')
        estimated_profit = total_invested * 0.02  # Estimation 2%
        
        return {
            'total_trades': total_trades,
            'successful_trades': successful_trades,
            'success_rate': success_rate,
            'total_invested': total_invested,
            'estimated_profit': estimated_profit
        }

class DashboardHandler(BaseHTTPRequestHandler):
    """Gestionnaire du dashboard web corrig√©"""
    
    def do_GET(self):
        if self.path == '/':
            self.send_dashboard()
        elif self.path == '/api/status':
            self.send_status()
        elif self.path == '/api/portfolio':
            self.send_portfolio()
        elif self.path == '/api/prices':
            self.send_prices()
        elif self.path == '/api/logs':
            self.send_logs()
        elif self.path == '/api/performance':
            self.send_performance()
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_POST(self):
        if self.path == '/api/trade':
            self.handle_trade()
        elif self.path == '/api/mode':
            self.handle_mode_change()
        elif self.path == '/api/auto-trading':
            self.handle_auto_trading()
        else:
            self.send_response(404)
            self.end_headers()
    
    def send_dashboard(self):
        """Interface dashboard corrig√©e"""
        html = """<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üéØ Bot Trading Final Corrig√©</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white; min-height: 100vh; padding: 20px;
        }
        .container { max-width: 1400px; margin: 0 auto; }
        .header { text-align: center; margin-bottom: 30px; }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; }
        .status-bar { 
            background: rgba(255,255,255,0.1); padding: 15px; 
            border-radius: 10px; margin-bottom: 20px; text-align: center;
        }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
        .card { 
            background: rgba(255,255,255,0.1); padding: 20px; 
            border-radius: 15px; backdrop-filter: blur(10px);
        }
        .card h3 { color: #4ade80; margin-bottom: 15px; }
        .mode-selector { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; }
        .mode-btn { 
            padding: 12px; border: none; border-radius: 8px;
            cursor: pointer; transition: all 0.3s;
            background: rgba(255,255,255,0.2); color: white;
        }
        .mode-btn:hover { background: rgba(255,255,255,0.3); }
        .mode-btn.active { background: #4ade80; color: black; }
        .btn { 
            padding: 12px 24px; border: none; border-radius: 8px;
            cursor: pointer; font-weight: bold; margin: 5px;
            transition: all 0.3s;
        }
        .btn-primary { background: #3b82f6; color: white; }
        .btn-success { background: #10b981; color: white; }
        .btn-danger { background: #ef4444; color: white; }
        .btn:hover { transform: translateY(-2px); }
        .trade-controls { display: flex; gap: 10px; margin: 10px 0; }
        .trade-controls input, .trade-controls select { 
            padding: 8px; border-radius: 5px; border: none;
            background: rgba(255,255,255,0.9); color: black;
        }
        .stats-grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 15px; }
        .stat-item { text-align: center; }
        .stat-value { font-size: 1.8em; font-weight: bold; color: #4ade80; }
        .logs-container { max-height: 300px; overflow-y: auto; }
        .log-entry { 
            padding: 8px; margin: 5px 0; border-radius: 5px;
            background: rgba(0,0,0,0.3); font-family: monospace;
        }
        .portfolio-item { 
            display: flex; justify-content: space-between; 
            padding: 10px; border-bottom: 1px solid rgba(255,255,255,0.2);
        }
        .price-item { 
            display: flex; justify-content: space-between; align-items: center;
            padding: 10px; border-bottom: 1px solid rgba(255,255,255,0.2);
        }
        .error { color: #ef4444; }
        .success { color: #10b981; }
        .warning { color: #f59e0b; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéØ Bot Trading Final Corrig√©</h1>
            <p>Dashboard de trading automatique avec correction d'erreurs</p>
        </div>
        
        <div class="status-bar">
            <span id="status">üîÑ Chargement...</span>
        </div>
        
        <div class="grid">
            <!-- Modes de Trading -->
            <div class="card">
                <h3>üéØ Modes de Trading</h3>
                <div class="mode-selector" id="modeSelector">
                    <!-- Modes charg√©s dynamiquement -->
                </div>
                <div style="margin-top: 15px;">
                    <button class="btn btn-success" onclick="startAutoTrading()">‚ñ∂Ô∏è D√©marrer Auto</button>
                    <button class="btn btn-danger" onclick="stopAutoTrading()">‚èπÔ∏è Arr√™ter Auto</button>
                </div>
            </div>
            
            <!-- Trading Manuel -->
            <div class="card">
                <h3>üí± Trading Manuel</h3>
                <div class="trade-controls">
                    <select id="tradeSymbol">
                        <option value="SOL/USD">SOL/USD</option>
                        <option value="ETH/USD">ETH/USD</option>
                        <option value="ATOM/USD">ATOM/USD</option>
                        <option value="BTC/USD">BTC/USD</option>
                    </select>
                    <input type="number" id="tradeAmount" placeholder="Montant USD" step="0.01" min="1">
                    <button class="btn btn-primary" onclick="executeTrade('buy')">Acheter</button>
                </div>
            </div>
            
            <!-- Portfolio -->
            <div class="card">
                <h3>üíº Portfolio</h3>
                <div id="portfolio">Chargement...</div>
            </div>
            
            <!-- Prix en temps r√©el -->
            <div class="card">
                <h3>üìà Prix Temps R√©el</h3>
                <div id="prices">Chargement...</div>
            </div>
            
            <!-- Statistiques -->
            <div class="card">
                <h3>üìä Performance</h3>
                <div class="stats-grid" id="stats">
                    <div class="stat-item">
                        <div class="stat-value" id="totalTrades">0</div>
                        <div>Total Trades</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="successfulTrades">0</div>
                        <div>R√©ussis</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="successRate">0.0%</div>
                        <div>Taux Succ√®s</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="totalInvested">$0.00</div>
                        <div>Investi</div>
                    </div>
                </div>
            </div>
            
            <!-- Logs -->
            <div class="card">
                <h3>üìù Logs Syst√®me</h3>
                <div class="logs-container" id="logs">Chargement...</div>
            </div>
        </div>
    </div>

    <script>
        let currentMode = 'micro';
        
        // Mise √† jour automatique toutes les 5 secondes
        setInterval(updateDashboard, 5000);
        updateDashboard();
        
        function updateDashboard() {
            updateStatus();
            updatePortfolio();
            updatePrices();
            updateLogs();
            updatePerformance();
        }
        
        function updateStatus() {
            fetch('/api/status')
                .then(r => r.json())
                .then(data => {
                    const status = document.getElementById('status');
                    if (data.connected) {
                        status.innerHTML = data.auto_trading ? 
                            'üü¢ Connect√© - Auto-trading ACTIF' : 
                            'üü° Connect√© - Auto-trading INACTIF';
                    } else {
                        status.innerHTML = 'üî¥ D√©connect√©';
                    }
                    
                    // Mettre √† jour les modes
                    const modeSelector = document.getElementById('modeSelector');
                    if (data.modes && modeSelector.children.length === 0) {
                        Object.keys(data.modes).forEach(modeKey => {
                            const mode = data.modes[modeKey];
                            const btn = document.createElement('button');
                            btn.className = 'mode-btn';
                            btn.onclick = () => changeMode(modeKey);
                            btn.innerHTML = `
                                <strong>${mode.name}</strong><br>
                                <small>${mode.description}</small><br>
                                <small>$${mode.min_amount}-${mode.max_amount}</small>
                            `;
                            if (modeKey === currentMode) btn.classList.add('active');
                            modeSelector.appendChild(btn);
                        });
                    }
                });
        }
        
        function updatePortfolio() {
            fetch('/api/portfolio')
                .then(r => r.json())
                .then(data => {
                    const portfolio = document.getElementById('portfolio');
                    if (Object.keys(data).length === 0) {
                        portfolio.innerHTML = '<div class="portfolio-item">Aucun actif</div>';
                        return;
                    }
                    
                    portfolio.innerHTML = Object.keys(data).map(currency => {
                        const amount = data[currency];
                        return `
                            <div class="portfolio-item">
                                <span>${currency}</span>
                                <span>${amount.total.toFixed(6)}</span>
                            </div>
                        `;
                    }).join('');
                });
        }
        
        function updatePrices() {
            fetch('/api/prices')
                .then(r => r.json())
                .then(data => {
                    const prices = document.getElementById('prices');
                    prices.innerHTML = Object.keys(data).map(symbol => {
                        const price = data[symbol];
                        return `
                            <div class="price-item">
                                <span>${symbol}</span>
                                <span>$${price.toFixed(2)}</span>
                            </div>
                        `;
                    }).join('');
                });
        }
        
        function updateLogs() {
            fetch('/api/logs')
                .then(r => r.json())
                .then(data => {
                    const logs = document.getElementById('logs');
                    logs.innerHTML = data.slice(-10).reverse().map(log => {
                        let className = '';
                        if (log.category === 'ERROR') className = 'error';
                        else if (log.category === 'SUCCESS') className = 'success';
                        else if (log.category === 'WARNING') className = 'warning';
                        
                        return `
                            <div class="log-entry ${className}">
                                [${log.timestamp}] ${log.message}
                            </div>
                        `;
                    }).join('');
                });
        }
        
        function updatePerformance() {
            fetch('/api/performance')
                .then(r => r.json())
                .then(data => {
                    document.getElementById('totalTrades').textContent = data.total_trades;
                    document.getElementById('successfulTrades').textContent = data.successful_trades;
                    document.getElementById('successRate').textContent = data.success_rate.toFixed(1) + '%';
                    document.getElementById('totalInvested').textContent = '$' + data.total_invested.toFixed(2);
                });
        }
        
        function changeMode(mode) {
            fetch('/api/mode', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({mode: mode})
            }).then(() => {
                currentMode = mode;
                // Mettre √† jour l'affichage
                document.querySelectorAll('.mode-btn').forEach(btn => {
                    btn.classList.remove('active');
                });
                event.target.closest('.mode-btn').classList.add('active');
            });
        }
        
        function executeTrade(side) {
            const symbol = document.getElementById('tradeSymbol').value;
            const amount = document.getElementById('tradeAmount').value;
            
            if (!amount || amount <= 0) {
                alert('Veuillez entrer un montant valide');
                return;
            }
            
            fetch('/api/trade', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    symbol: symbol,
                    side: side,
                    amount: parseFloat(amount)
                })
            }).then(r => r.json())
              .then(data => {
                  if (data.success) {
                      alert('Trade ex√©cut√© avec succ√®s !');
                  } else {
                      alert('Erreur: ' + data.message);
                  }
              });
        }
        
        function startAutoTrading() {
            fetch('/api/auto-trading', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({action: 'start'})
            }).then(() => updateDashboard());
        }
        
        function stopAutoTrading() {
            fetch('/api/auto-trading', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({action: 'stop'})
            }).then(() => updateDashboard());
        }
    </script>
</body>
</html>"""
        
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))
    
    def send_status(self):
        """Statut du bot"""
        status = {
            'connected': bot.is_connected,
            'mode': bot.current_mode,
            'auto_trading': bot.auto_trading_active,
            'modes': bot.trading_modes
        }
        self.send_json_response(status)
    
    def send_portfolio(self):
        """Portfolio actuel"""
        portfolio = bot.get_portfolio()
        self.send_json_response(portfolio)
    
    def send_prices(self):
        """Prix actuels"""
        prices = bot.get_current_prices()
        self.send_json_response(prices)
    
    def send_logs(self):
        """Logs r√©cents"""
        self.send_json_response(bot.logs)
    
    def send_performance(self):
        """Statistiques de performance"""
        stats = bot.get_performance_stats()
        self.send_json_response(stats)
    
    def handle_trade(self):
        """Gestion des trades manuels"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length).decode('utf-8')
            data = json.loads(post_data)
            
            symbol = data.get('symbol')
            side = data.get('side') 
            amount = data.get('amount')
            
            success = bot.execute_trade_corrected(symbol, side, amount)
            
            self.send_json_response({
                'success': success,
                'message': 'Trade ex√©cut√©' if success else '√âchec du trade'
            })
            
        except Exception as e:
            self.send_json_response({
                'success': False,
                'message': str(e)
            })
    
    def handle_mode_change(self):
        """Changement de mode"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length).decode('utf-8')
            data = json.loads(post_data)
            
            new_mode = data.get('mode')
            if new_mode in bot.trading_modes:
                bot.current_mode = new_mode
                bot.log_message(f"Mode chang√©: {new_mode}", "MODE_CHANGE")
                
            self.send_json_response({'success': True})
            
        except Exception as e:
            self.send_json_response({'success': False, 'message': str(e)})
    
    def handle_auto_trading(self):
        """Gestion auto-trading"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length).decode('utf-8')
            data = json.loads(post_data)
            
            action = data.get('action')
            if action == 'start':
                success = bot.start_auto_trading()
            elif action == 'stop':
                success = bot.stop_auto_trading()
            else:
                success = False
                
            self.send_json_response({'success': success})
            
        except Exception as e:
            self.send_json_response({'success': False, 'message': str(e)})
    
    def send_json_response(self, data):
        """Envoi de r√©ponse JSON"""
        self.send_response(200)
        self.send_header('Content-type', 'application/json; charset=utf-8')
        self.end_headers()
        response = json.dumps(data, ensure_ascii=False)
        self.wfile.write(response.encode('utf-8'))

def main():
    """Fonction principale"""
    global bot
    
    print("\nüéØ LANCEMENT BOT TRADING FINAL CORRIG√â")
    print("=" * 60)
    print("‚úÖ CORRECTIONS APPLIQU√âES:")
    print("   ‚Ä¢ R√©solution erreur 'account is not available'")
    print("   ‚Ä¢ D√©tection automatique du compte de trading")
    print("   ‚Ä¢ Utilisation de 'cost' au lieu d'amount pour market buy")
    print("   ‚Ä¢ Gestion d'erreurs am√©lior√©e")
    print("   ‚Ä¢ Interface dashboard optimis√©e")
    print("=" * 60)
    
    # Initialiser le bot
    bot = CorrectedTradingBot()
    
    if not bot.is_connected:
        print("‚ùå Impossible de se connecter √† l'API")
        return
    
    # D√©marrer le serveur web
    port = 8087
    server = HTTPServer(('localhost', port), DashboardHandler)
    
    print(f"üåê Dashboard Corrig√©: http://localhost:{port}")
    print("üéØ MODES DISPONIBLES:")
    for mode_key, mode_info in bot.trading_modes.items():
        print(f"   ‚Ä¢ {mode_info['name']}: ${mode_info['min_amount']}-{mode_info['max_amount']}")
    print("=" * 60)
    print("üöÄ BOT TRADING CORRIG√â PR√äT !")
    print("\n‚è∏Ô∏è Ctrl+C pour arr√™ter")
    
    # D√©marrer auto-trading
    bot.start_auto_trading()
    
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Arr√™t bot trading corrig√©...")
        bot.stop_auto_trading()
        print("‚úÖ Bot ferm√© proprement")
        print(f"üìÑ Logs sauvegard√©s: {bot.log_file}")

if __name__ == "__main__":
    main()
