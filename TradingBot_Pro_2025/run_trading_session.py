#!/usr/bin/env python3
"""
TradingBot Pro 2025 - Script de d√©marrage et de session de trading
Ce script facilite le lancement, la configuration et l'ex√©cution du bot de trading.
"""

import os
import sys
import argparse
import subprocess
import signal
import time
from pathlib import Path

# Import des modules de trading pour les sessions
try:
    from src.data.market_data import get_historical_data
    from src.models.momentum_model import MomentumModel
    from src.strategies.momentum_multi_asset import MomentumMultiAsset
except ImportError:
    print("‚ö†Ô∏è  Modules de trading non disponibles, seuls les commandes de base sont disponibles")
    get_historical_data = None
    MomentumModel = None
    MomentumMultiAsset = None

def setup_environment():
    """Configure l'environnement Python et installe les d√©pendances"""
    print("üîß Configuration de l'environnement...")
    
    # V√©rifier si nous sommes dans un environnement virtuel
    if not hasattr(sys, 'base_prefix') or sys.base_prefix == sys.prefix:
        print("‚ö†Ô∏è  Il est recommand√© d'utiliser un environnement virtuel")
        response = input("Continuer quand m√™me ? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå Installation annul√©e")
            return False
    
    # Installer les d√©pendances
    try:
        print("üì¶ Installation des d√©pendances...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ D√©pendances install√©es avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation des d√©pendances: {e}")
        return False

def create_env_file():
    """Cr√©e le fichier .env √† partir du template si n√©cessaire"""
    env_file = Path(".env")
    env_example = Path(".env.example")
    
    if not env_file.exists() and env_example.exists():
        print("üìã Cr√©ation du fichier de configuration...")
        with open(env_example, 'r') as f:
            content = f.read()
        
        with open(env_file, 'w') as f:
            f.write(content)
        
        print("‚úÖ Fichier .env cr√©√© √† partir du template")
        print("‚ö†Ô∏è  N'oubliez pas de configurer vos cl√©s API dans le fichier .env")
        return True
    elif not env_file.exists():
        print("‚ö†Ô∏è  Aucun fichier de configuration trouv√©")
        return False
    
    return True

def check_dependencies():
    """V√©rifie que toutes les d√©pendances sont install√©es"""
    required_packages = [
        'flask', 'requests', 'pandas', 'numpy', 
        'scikit-learn', 'yfinance', 'python-dotenv'
    ]
    
    missing = []
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing.append(package)
    
    if missing:
        print(f"‚ùå D√©pendances manquantes: {', '.join(missing)}")
        return False
    
    print("‚úÖ Toutes les d√©pendances sont install√©es")
    return True

def run_tests():
    """Ex√©cute les tests unitaires"""
    print("üß™ Ex√©cution des tests...")
    try:
        result = subprocess.run([
            sys.executable, "-m", "pytest", "tests/", "-v", "--tb=short"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Tous les tests sont pass√©s")
            return True
        else:
            print("‚ùå Certains tests ont √©chou√©")
            print(result.stdout)
            print(result.stderr)
            return False
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'ex√©cution des tests: {e}")
        return False

def start_bot(mode='development', port=5000, host='127.0.0.1'):
    """D√©marre le bot de trading"""
    print(f"üöÄ D√©marrage du bot en mode {mode}...")
    
    # Configurer les variables d'environnement
    env = os.environ.copy()
    env['FLASK_ENV'] = mode
    env['FLASK_DEBUG'] = 'True' if mode == 'development' else 'False'
    
    try:
        if mode == 'production':
            # Utiliser Gunicorn en production
            cmd = [
                'gunicorn',
                '--bind', f'{host}:{port}',
                '--workers', '4',
                '--timeout', '120',
                '--access-logfile', '-',
                '--error-logfile', '-',
                'src.app:app'
            ]
        else:
            # Utiliser le serveur de d√©veloppement Flask
            cmd = [sys.executable, 'src/app.py']
            env['FLASK_RUN_HOST'] = host
            env['FLASK_RUN_PORT'] = str(port)
        
        print(f"üåê Bot disponible sur http://{host}:{port}")
        print(f"üìä Dashboard: http://{host}:{port}")
        print(f"üì° API: http://{host}:{port}/api")
        print("\nüí° Appuyez sur Ctrl+C pour arr√™ter le bot")
        
        # D√©marrer le processus
        process = subprocess.Popen(cmd, env=env, cwd='.')
        
        # G√©rer l'arr√™t propre
        def signal_handler(sig, frame):
            print("\nüõë Arr√™t du bot...")
            process.terminate()
            try:
                process.wait(timeout=10)
            except subprocess.TimeoutExpired:
                print("‚ö†Ô∏è  Arr√™t forc√© du processus")
                process.kill()
            print("‚úÖ Bot arr√™t√© proprement")
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # Attendre la fin du processus
        process.wait()
        
    except FileNotFoundError as e:
        print(f"‚ùå Commande non trouv√©e: {e}")
        if 'gunicorn' in str(e) and mode == 'production':
            print("üí° Installez Gunicorn avec: pip install gunicorn")
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage: {e}")

def run_trading_session():
    """
    Orchestrates a full trading session:
    1. Trains the model if it doesn't exist.
    2. Runs a backtest on historical data.
    3. Simulates one live trade execution.
    """
    if not all([get_historical_data, MomentumModel, MomentumMultiAsset]):
        print("‚ùå Modules de trading non disponibles")
        return False
        
    ASSET_TICKER = 'BTC-USD'
    MODEL_PATH = 'btc_momentum_model.pkl'

    TRAIN_START_DATE = '2020-01-01'
    TRAIN_END_DATE = '2022-12-31'

    BACKTEST_START_DATE = '2023-01-01'
    BACKTEST_END_DATE = '2023-12-31'

    print("ü§ñ --- D√©marrage de la session de trading ---")

    # 1. Train the model if it doesn't exist
    if not os.path.exists(MODEL_PATH):
        print(f"\nüìä Mod√®le non trouv√©. Entra√Ænement d'un nouveau mod√®le pour {ASSET_TICKER}...")
        training_data = get_historical_data(ASSET_TICKER, TRAIN_START_DATE, TRAIN_END_DATE)
        if training_data is not None:
            model = MomentumModel(model_path=MODEL_PATH)
            model.train(training_data)
        else:
            print("‚ùå Impossible de t√©l√©charger les donn√©es d'entra√Ænement.")
            return False
    else:
        print(f"\n‚úÖ Mod√®le existant trouv√©: {MODEL_PATH}")

    # Initialize the strategy (which will load the model)
    strategy = MomentumMultiAsset(asset_ticker=ASSET_TICKER, model_path=MODEL_PATH)

    if not strategy.model:
        print("‚ùå √âchec du chargement du mod√®le dans la strat√©gie.")
        return False

    # 2. Run Backtest
    print(f"\nüìà Ex√©cution du backtest pour {ASSET_TICKER} de {BACKTEST_START_DATE} √† {BACKTEST_END_DATE}...")
    backtest_data = get_historical_data(ASSET_TICKER, BACKTEST_START_DATE, BACKTEST_END_DATE)
    if backtest_data is not None:
        strategy.backtest(backtest_data)
    else:
        print("‚ùå Impossible de t√©l√©charger les donn√©es de backtest.")

    # 3. Simulate a single live execution
    print("\nüîÑ --- Simulation d'un trade en temps r√©el ---")
    strategy.start()
    strategy.execute()
    strategy.stop()

    print("\n‚úÖ --- Session de trading termin√©e ---")
    return True

def show_status():
    """Affiche le statut du syst√®me"""
    print("üìä Statut du syst√®me TradingBot Pro 2025")
    print("=" * 50)
    
    # V√©rifier l'environnement
    print(f"üêç Python: {sys.version.split()[0]}")
    print(f"üìÅ R√©pertoire: {os.getcwd()}")
    
    # V√©rifier les fichiers de configuration
    if Path(".env").exists():
        print("‚úÖ Fichier de configuration: Pr√©sent")
    else:
        print("‚ùå Fichier de configuration: Manquant")
    
    # V√©rifier les d√©pendances
    if check_dependencies():
        print("‚úÖ D√©pendances: Install√©es")
    else:
        print("‚ùå D√©pendances: Manquantes")
    
    # V√©rifier la structure des r√©pertoires
    required_dirs = ['src', 'tests', 'docs', 'frontend']
    for dir_name in required_dirs:
        if Path(dir_name).exists():
            print(f"‚úÖ R√©pertoire {dir_name}: Pr√©sent")
        else:
            print(f"‚ùå R√©pertoire {dir_name}: Manquant")

def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(
        description="TradingBot Pro 2025 - Script de d√©marrage",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  python run_trading_session.py setup          # Configure l'environnement
  python run_trading_session.py start          # D√©marre en mode d√©veloppement
  python run_trading_session.py start --prod   # D√©marre en mode production
  python run_trading_session.py session        # Lance une session de trading
  python run_trading_session.py test           # Ex√©cute les tests
  python run_trading_session.py status         # Affiche le statut du syst√®me
        """
    )
    
    parser.add_argument('command', choices=['setup', 'start', 'session', 'test', 'status'],
                       help='Commande √† ex√©cuter')
    parser.add_argument('--prod', action='store_true',
                       help='D√©marrer en mode production')
    parser.add_argument('--port', type=int, default=5000,
                       help='Port d\'√©coute (d√©faut: 5000)')
    parser.add_argument('--host', default='127.0.0.1',
                       help='Adresse d\'√©coute (d√©faut: 127.0.0.1)')
    parser.add_argument('--skip-tests', action='store_true',
                       help='Ignorer les tests lors du setup')
    
    args = parser.parse_args()
    
    print("ü§ñ TradingBot Pro 2025")
    print("=" * 30)
    
    if args.command == 'setup':
        print("üîß Configuration de l'environnement...")
        success = True
        
        # Cr√©er le fichier .env
        if not create_env_file():
            success = False
        
        # Installer les d√©pendances
        if not setup_environment():
            success = False
        
        # Ex√©cuter les tests (optionnel)
        if not args.skip_tests and success:
            if not run_tests():
                print("‚ö†Ô∏è  Les tests ont √©chou√©, mais l'installation continue")
        
        if success:
            print("\n‚úÖ Configuration termin√©e avec succ√®s!")
            print("üí° Vous pouvez maintenant d√©marrer le bot avec: python run_trading_session.py start")
        else:
            print("\n‚ùå Erreurs lors de la configuration")
            sys.exit(1)
    
    elif args.command == 'start':
        # V√©rifications pr√©alables
        if not Path(".env").exists():
            print("‚ùå Fichier .env manquant. Ex√©cutez d'abord: python run_trading_session.py setup")
            sys.exit(1)
        
        if not check_dependencies():
            print("‚ùå D√©pendances manquantes. Ex√©cutez: python run_trading_session.py setup")
            sys.exit(1)
        
        mode = 'production' if args.prod else 'development'
        start_bot(mode, args.port, args.host)
    
    elif args.command == 'session':
        # Lancer une session de trading
        if not run_trading_session():
            sys.exit(1)
    
    elif args.command == 'test':
        if not run_tests():
            sys.exit(1)
    
    elif args.command == 'status':
        show_status()

if __name__ == '__main__':
    main()
