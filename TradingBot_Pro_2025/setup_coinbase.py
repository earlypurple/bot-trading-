#!/usr/bin/env python3
"""
üîß CONFIGURATEUR CL√âS API COINBASE - TRADINGBOT PRO 2025
========================================================
üîê Assistant de configuration interactif
‚ö° Configuration rapide et s√©curis√©e

üéØ Fonctionnalit√©s:
- üìù Saisie interactive des cl√©s API
- üîí Validation des cl√©s
- üß™ Test de connexion automatique
- üíæ Sauvegarde s√©curis√©e
"""

import os
import sys
import json
import getpass
from pathlib import Path

# Ajouter le path pour importer nos modules
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

try:
    from exchanges.coinbase_connector import CoinbaseConnector
    from config.coinbase_config import ConfigManager
except ImportError as e:
    print(f"‚ùå Erreur import: {e}")
    print("üí° Assurez-vous d'√™tre dans le bon r√©pertoire")
    sys.exit(1)

class CoinbaseSetup:
    """Assistant de configuration Coinbase"""
    
    def __init__(self):
        self.config_manager = ConfigManager()
        self.config_file = Path("coinbase_keys.json")
    
    def welcome(self):
        """Message de bienvenue"""
        print("üîß CONFIGURATEUR COINBASE API")
        print("=" * 40)
        print("üéØ Configuration de vos cl√©s API Coinbase")
        print("üîê Donn√©es stock√©es en local de fa√ßon s√©curis√©e")
        print()
        print("üìã Vous aurez besoin de:")
        print("   ‚Ä¢ Cl√© API (API Key)")
        print("   ‚Ä¢ Secret API (API Secret)")
        print("   ‚Ä¢ Passphrase")
        print()
        print("üåê Obtenez vos cl√©s sur: https://pro.coinbase.com/profile/api")
        print("=" * 40)
        print()
    
    def get_api_credentials(self, environment: str = "sandbox") -> dict:
        """
        R√©cup√®re les cl√©s API de l'utilisateur
        
        Args:
            environment: 'sandbox' ou 'production'
            
        Returns:
            Dictionnaire avec les cl√©s
        """
        env_name = "üß™ SANDBOX (Test)" if environment == "sandbox" else "üöÄ PRODUCTION (R√©el)"
        
        print(f"üìù Configuration {env_name}")
        print("-" * 30)
        
        if environment == "production":
            print("‚ö†Ô∏è ATTENTION: Mode production = ARGENT R√âEL !")
            print("üí° Recommand√©: Commencez par le sandbox")
            confirm = input("Continuer en production? (y/N): ")
            if confirm.lower() != 'y':
                return None
        
        try:
            api_key = input("üîë API Key: ").strip()
            if not api_key:
                print("‚ùå API Key requise")
                return None
            
            api_secret = getpass.getpass("üîê API Secret: ").strip()
            if not api_secret:
                print("‚ùå API Secret requis")
                return None
            
            passphrase = getpass.getpass("üóùÔ∏è Passphrase: ").strip()
            if not passphrase:
                print("‚ùå Passphrase requise")
                return None
            
            return {
                "api_key": api_key,
                "api_secret": api_secret,
                "passphrase": passphrase,
                "sandbox": environment == "sandbox"
            }
        
        except KeyboardInterrupt:
            print("\nüõë Configuration annul√©e")
            return None
        except Exception as e:
            print(f"‚ùå Erreur saisie: {e}")
            return None
    
    def test_connection(self, config: dict) -> bool:
        """
        Test la connexion avec les cl√©s fournies
        
        Args:
            config: Configuration √† tester
            
        Returns:
            True si connexion OK
        """
        print("\nüîç Test de connexion...")
        
        try:
            connector = CoinbaseConnector(
                api_key=config["api_key"],
                api_secret=config["api_secret"],
                passphrase=config["passphrase"],
                sandbox=config["sandbox"]
            )
            
            result = connector.test_connection()
            
            if result["status"] == "success":
                print("‚úÖ Connexion r√©ussie !")
                print(f"üîê Authentifi√©: {result['authenticated']}")
                print(f"üìä Produits disponibles: {result.get('products_count', 0)}")
                if result.get('accounts_count'):
                    print(f"üí∞ Comptes d√©tect√©s: {result['accounts_count']}")
                return True
            
            elif result["status"] == "partial":
                print("‚ö†Ô∏è Connexion partielle")
                print(f"üìù Message: {result['message']}")
                return True
            
            else:
                print("‚ùå √âchec de connexion")
                print(f"üìù Message: {result['message']}")
                return False
        
        except Exception as e:
            print(f"üí• Erreur test: {e}")
            return False
    
    def save_config(self, sandbox_config: dict = None, production_config: dict = None):
        """
        Sauvegarde la configuration
        
        Args:
            sandbox_config: Config sandbox
            production_config: Config production
        """
        print("\nüíæ Sauvegarde de la configuration...")
        
        config_data = {
            "created_at": "2025-08-24",
            "version": "1.0"
        }
        
        if sandbox_config:
            config_data["sandbox"] = sandbox_config
        
        if production_config:
            config_data["production"] = production_config
        
        try:
            with open(self.config_file, 'w') as f:
                json.dump(config_data, f, indent=2)
            
            # S√©curiser le fichier (lecture seule pour le propri√©taire)
            os.chmod(self.config_file, 0o600)
            
            print(f"‚úÖ Configuration sauv√©e: {self.config_file}")
            print("üîí Permissions s√©curis√©es appliqu√©es")
            
            # Cr√©er/mettre √† jour .gitignore
            self.update_gitignore()
            
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde: {e}")
    
    def load_config(self) -> dict:
        """
        Charge la configuration existante
        
        Returns:
            Configuration charg√©e
        """
        if not self.config_file.exists():
            return {}
        
        try:
            with open(self.config_file, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lecture config: {e}")
            return {}
    
    def update_gitignore(self):
        """Met √† jour .gitignore pour exclure les cl√©s"""
        gitignore_file = Path(".gitignore")
        
        patterns_to_add = [
            "coinbase_keys.json",
            "*.key",
            "*.secret",
            ".env.local",
            "my_coinbase_keys.py"
        ]
        
        try:
            # Lire .gitignore existant
            existing_patterns = []
            if gitignore_file.exists():
                with open(gitignore_file, 'r') as f:
                    existing_patterns = f.read().splitlines()
            
            # Ajouter les nouveaux patterns
            new_patterns = []
            for pattern in patterns_to_add:
                if pattern not in existing_patterns:
                    new_patterns.append(pattern)
            
            if new_patterns:
                with open(gitignore_file, 'a') as f:
                    f.write("\n# TradingBot Pro 2025 - Cl√©s API\n")
                    for pattern in new_patterns:
                        f.write(f"{pattern}\n")
                
                print(f"üìù .gitignore mis √† jour avec {len(new_patterns)} nouveaux patterns")
        
        except Exception as e:
            print(f"‚ö†Ô∏è Impossible de mettre √† jour .gitignore: {e}")
    
    def interactive_setup(self):
        """Configuration interactive compl√®te"""
        
        self.welcome()
        
        # Charger config existante
        existing_config = self.load_config()
        
        if existing_config:
            print("üîç Configuration existante d√©tect√©e")
            if "sandbox" in existing_config:
                print("   ‚úÖ Sandbox configur√©")
            if "production" in existing_config:
                print("   ‚úÖ Production configur√©")
            
            response = input("\n√âcraser la configuration? (y/N): ")
            if response.lower() != 'y':
                print("üìã Configuration conserv√©e")
                return
        
        # Configuration sandbox
        print("\n" + "="*50)
        print("üß™ √âTAPE 1: Configuration Sandbox (Recommand√©)")
        print("="*50)
        
        sandbox_config = None
        setup_sandbox = input("Configurer le sandbox? (Y/n): ")
        if setup_sandbox.lower() != 'n':
            sandbox_config = self.get_api_credentials("sandbox")
            
            if sandbox_config and self.test_connection(sandbox_config):
                print("‚úÖ Sandbox configur√© avec succ√®s !")
            else:
                print("‚ùå √âchec configuration sandbox")
                response = input("Continuer quand m√™me? (y/N): ")
                if response.lower() != 'y':
                    return
        
        # Configuration production
        print("\n" + "="*50)
        print("üöÄ √âTAPE 2: Configuration Production (Optionnel)")
        print("="*50)
        
        production_config = None
        setup_production = input("Configurer la production? (y/N): ")
        if setup_production.lower() == 'y':
            production_config = self.get_api_credentials("production")
            
            if production_config and self.test_connection(production_config):
                print("‚úÖ Production configur√© avec succ√®s !")
            else:
                print("‚ùå √âchec configuration production")
        
        # Sauvegarde
        if sandbox_config or production_config:
            self.save_config(sandbox_config, production_config)
            
            print("\n" + "="*50)
            print("üéâ CONFIGURATION TERMIN√âE !")
            print("="*50)
            print("‚úÖ Cl√©s API sauvegard√©es")
            print("üîí Fichier s√©curis√© cr√©√©")
            print("üöÄ Pr√™t pour le trading !")
            print()
            print("üí° Prochaines √©tapes:")
            print("   1. Lancez le dashboard: python dashboard_server.py")
            print("   2. Ouvrez http://localhost:8888")
            print("   3. Profitez du trading temps r√©el !")
        else:
            print("\nüõë Aucune configuration sauv√©e")
    
    def quick_test(self):
        """Test rapide des cl√©s existantes"""
        
        print("üîç TEST RAPIDE DES CL√âS")
        print("=" * 30)
        
        config = self.load_config()
        
        if not config:
            print("‚ùå Aucune configuration trouv√©e")
            print("üí° Lancez d'abord la configuration: python setup_coinbase.py")
            return
        
        # Test sandbox
        if "sandbox" in config:
            print("\nüß™ Test Sandbox...")
            sandbox_result = self.test_connection(config["sandbox"])
            if not sandbox_result:
                print("‚ùå Sandbox: √âchec")
        
        # Test production
        if "production" in config:
            print("\nüöÄ Test Production...")
            prod_result = self.test_connection(config["production"])
            if not prod_result:
                print("‚ùå Production: √âchec")
        
        if not config.get("sandbox") and not config.get("production"):
            print("‚ö†Ô∏è Aucune cl√© valide configur√©e")

def main():
    """Fonction principale"""
    
    setup = CoinbaseSetup()
    
    if len(sys.argv) > 1 and sys.argv[1] == "test":
        setup.quick_test()
    else:
        setup.interactive_setup()

if __name__ == "__main__":
    main()
