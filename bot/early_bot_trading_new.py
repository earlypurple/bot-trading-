"""
Early-Bot-Trading - Bot IA Trading Automatis√© avec nouveau dashboard optimis√©
Version clean avec template moderne int√©gr√©
"""

import os
import sys
import json
import time
import asyncio
import logging
from datetime import datetime, timedelta
from flask import Flask, render_template_string, jsonify, request
from flask_cors import CORS
import threading
from typing import Dict, List, Optional, Tuple
import sqlite3

# Logging system
from logging_system import (setup_logging, get_logger, log_portfolio_update, 
                           log_trading_activity, log_error, log_ai_analysis)

# AI Trading Engine
from ai.quantum_ai_engine import TradingAI

# Import du nouveau template optimis√©
from templates.new_dashboard import NEW_DASHBOARD_TEMPLATE

# Configuration - Import nouvelles cl√©s CDP
try:
    from config.api_config_cdp import API_CONFIG, TRADING_CONFIG, TRADING_MODES, get_current_mode_config, switch_trading_mode
    print("‚úÖ Utilisation des nouvelles cl√©s CDP")
except ImportError:
    from config.api_config import API_CONFIG, TRADING_CONFIG, TRADING_MODES, get_current_mode_config, switch_trading_mode
    print("‚ö†Ô∏è Fallback vers anciennes cl√©s")

# Imports pour fonctionnalit√©s avanc√©es
try:
    from enhanced_portfolio_manager import EnhancedPortfolioManager
    ENHANCED_FEATURES = True
except ImportError:
    print("‚ö†Ô∏è Fonctionnalit√©s avanc√©es non disponibles")
    ENHANCED_FEATURES = False

class EarlyBotTrading:
    """Bot de trading automatis√© avec IA quantique et dashboard moderne"""
    
    def __init__(self):
        # Logging setup
        self.logger, self.trading_logger, self.api_logger, self.log_file = setup_logging()
        self.logger.info("ü§ñ Initialisation d'Early-Bot-Trading avec nouveau dashboard...")
        
        # Trading AI
        self.ai = TradingAI(self)
        
        # Configuration
        self.config = TRADING_CONFIG
        self.trading_modes = TRADING_MODES
        
        # √âtat du bot
        self.is_trading = False
        self.current_mode = "normal"
        self.last_update = datetime.now()
        
        # Portfolio
        self.portfolio_balance = 0.0
        self.positions = []
        self.daily_pnl = 0.0
        
        # Enhanced Portfolio Manager
        if ENHANCED_FEATURES:
            try:
                self.portfolio_manager = EnhancedPortfolioManager()
                self.logger.info("‚úÖ Enhanced Portfolio Manager activ√©")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è Enhanced Portfolio Manager non disponible: {e}")
                self.portfolio_manager = None
        else:
            self.portfolio_manager = None
        
        # Stats
        self.total_trades = 0
        self.winning_trades = 0
        self.losing_trades = 0
        self.total_profit = 0.0
        
        # Signaux IA
        self.signals = []
        
        self.logger.info("‚úÖ Bot initialis√© avec succ√®s !")
    
    def start_trading(self) -> bool:
        """D√©marre le trading automatis√©"""
        try:
            if self.is_trading:
                return False
                
            self.is_trading = True
            self.logger.info("üöÄ Trading d√©marr√© !")
            
            # D√©marrer le thread de trading
            trading_thread = threading.Thread(target=self._trading_loop, daemon=True)
            trading_thread.start()
            
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Erreur d√©marrage trading: {e}")
            return False
    
    def stop_trading(self) -> bool:
        """Arr√™te le trading automatis√©"""
        try:
            self.is_trading = False
            self.logger.info("üõë Trading arr√™t√©")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Erreur arr√™t trading: {e}")
            return False
    
    def _trading_loop(self):
        """Boucle principale de trading"""
        while self.is_trading:
            try:
                # Analyser le march√© avec l'IA
                analysis = self.ai.analyze_market()
                
                # Prendre des d√©cisions de trading
                if analysis and analysis.get('signal'):
                    self._process_trading_signal(analysis)
                
                # Attendre avant la prochaine analyse
                time.sleep(self.config.get('analysis_interval', 60))
                
            except Exception as e:
                self.logger.error(f"‚ùå Erreur dans la boucle de trading: {e}")
                time.sleep(30)
    
    def _process_trading_signal(self, signal):
        """Traite un signal de trading"""
        try:
            # Logique de traitement des signaux
            self.logger.info(f"üìä Signal re√ßu: {signal}")
            
            # Ajouter le signal √† la liste
            self.signals.append({
                'symbol': signal.get('symbol', 'BTC-USD'),
                'action': signal.get('action', 'HOLD'),
                'confidence': signal.get('confidence', 0.5),
                'timestamp': datetime.now().isoformat()
            })
            
            # Garder seulement les 10 derniers signaux
            self.signals = self.signals[-10:]
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur traitement signal: {e}")
    
    def change_trading_mode(self, mode: str) -> bool:
        """Change le mode de trading"""
        try:
            if mode in self.trading_modes:
                self.current_mode = mode
                self.config.update(self.trading_modes[mode])
                self.logger.info(f"‚öôÔ∏è Mode chang√© vers: {mode}")
                return True
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Erreur changement mode: {e}")
            return False
    
    def get_portfolio_status(self) -> Dict:
        """R√©cup√®re le statut du portfolio"""
        try:
            if self.portfolio_manager:
                return self.portfolio_manager.get_comprehensive_analytics()
            else:
                return {
                    'balance': self.portfolio_balance,
                    'daily_pnl': self.daily_pnl,
                    'positions': len(self.positions),
                    'win_rate': self._calculate_win_rate()
                }
        except Exception as e:
            self.logger.error(f"‚ùå Erreur r√©cup√©ration portfolio: {e}")
            return {'balance': 0, 'daily_pnl': 0, 'positions': 0, 'win_rate': 0}
    
    def _calculate_win_rate(self) -> float:
        """Calcule le taux de r√©ussite"""
        if self.total_trades == 0:
            return 0.0
        return (self.winning_trades / self.total_trades) * 100
    
    def get_ai_status(self) -> Dict:
        """R√©cup√®re le statut de l'IA"""
        try:
            return {
                'coherence': getattr(self.ai, 'quantum_coherence', 85),
                'precision': self._calculate_win_rate(),
                'active_signals': len(self.signals),
                'ml_models': 5
            }
        except Exception as e:
            self.logger.error(f"‚ùå Erreur r√©cup√©ration statut IA: {e}")
            return {'coherence': 0, 'precision': 0, 'active_signals': 0, 'ml_models': 0}

# Flask Application
app = Flask(__name__)
CORS(app)

# Variable globale pour l'instance du bot
bot = None

# Routes principales
@app.route('/')
def dashboard():
    """Page principale avec nouveau dashboard"""
    return render_template_string(NEW_DASHBOARD_TEMPLATE)

@app.route('/api/bot/start', methods=['POST'])
def api_start_trading():
    """API pour d√©marrer le trading"""
    global bot
    try:
        if bot is None:
            return jsonify({'success': False, 'error': 'Bot non initialis√©'})
        
        success = bot.start_trading()
        return jsonify({'success': success})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/bot/stop', methods=['POST'])
def api_stop_trading():
    """API pour arr√™ter le trading"""
    global bot
    try:
        if bot is None:
            return jsonify({'success': False, 'error': 'Bot non initialis√©'})
        
        success = bot.stop_trading()
        return jsonify({'success': success})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/bot/status')
def api_bot_status():
    """API pour r√©cup√©rer le statut du bot"""
    global bot
    try:
        if bot is None:
            return jsonify({'error': 'Bot non initialis√©'})
        
        return jsonify({
            'is_trading': bot.is_trading,
            'current_mode': bot.current_mode,
            'last_update': bot.last_update.isoformat(),
            'total_trades': bot.total_trades
        })
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/portfolio/enhanced')
def api_portfolio_enhanced():
    """API pour r√©cup√©rer le portfolio avec analytics"""
    global bot
    try:
        if bot is None:
            return jsonify({'error': 'Bot non initialis√©'})
        
        portfolio = bot.get_portfolio_status()
        return jsonify(portfolio)
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/positions')
def api_positions():
    """API pour r√©cup√©rer les positions actives"""
    global bot
    try:
        if bot is None:
            return jsonify({'error': 'Bot non initialis√©'})
        
        return jsonify(bot.positions)
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/mode/set/<mode>', methods=['POST'])
def api_set_mode(mode):
    """API pour changer le mode de trading"""
    global bot
    try:
        if bot is None:
            return jsonify({'success': False, 'error': 'Bot non initialis√©'})
        
        success = bot.change_trading_mode(mode)
        return jsonify({'success': success, 'current_mode': bot.current_mode})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/modes/detailed')
def api_modes_detailed():
    """API pour r√©cup√©rer les modes avec d√©tails"""
    global bot
    try:
        if bot is None:
            return jsonify({'error': 'Bot non initialis√©'})
        
        return jsonify({
            'success': True,
            'current_mode': bot.current_mode,
            'modes': bot.trading_modes
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/mode/configure', methods=['POST'])
def api_configure_mode():
    """API pour configurer un mode de trading"""
    global bot
    try:
        if bot is None:
            return jsonify({'success': False, 'error': 'Bot non initialis√©'})
        
        data = request.get_json()
        mode_name = data.get('mode')
        config = data.get('config')
        
        if mode_name not in bot.trading_modes:
            return jsonify({'success': False, 'error': f'Mode {mode_name} non valide'})
        
        # Validation des param√®tres
        required_params = ['position_size', 'stop_loss', 'take_profit', 'min_trade_amount', 'max_trades_per_day', 'trading_frequency']
        for param in required_params:
            if param not in config:
                return jsonify({'success': False, 'error': f'Param√®tre {param} manquant'})
        
        # Mise √† jour du mode
        bot.trading_modes[mode_name].update(config)
        
        return jsonify({
            'success': True,
            'mode': mode_name,
            'new_config': bot.trading_modes[mode_name],
            'message': f'Mode {mode_name} configur√© avec succ√®s'
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/ai/status')
def api_ai_status():
    """API pour r√©cup√©rer le statut de l'IA"""
    global bot
    try:
        if bot is None:
            return jsonify({'error': 'Bot non initialis√©'})
        
        ai_status = bot.get_ai_status()
        return jsonify(ai_status)
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/signals')
def api_signals():
    """API pour r√©cup√©rer les signaux IA"""
    global bot
    try:
        if bot is None:
            return jsonify({'error': 'Bot non initialis√©'})
        
        return jsonify({'signals': bot.signals})
    except Exception as e:
        return jsonify({'error': str(e)})

# Initialisation et d√©marrage
if __name__ == "__main__":
    # R√©cup√©ration du logger principal pour le main
    main_logger = get_logger('main')
    
    print("üåê D√©marrage du nouveau Bot Trading Quantique IA...")
    print("üì° Interface moderne disponible sur: http://localhost:8091")
    print("üöÄ Dashboard optimis√© avec template moderne activ√© !")
    print("üí∞ Portfolio: $18.93 - Pr√™t pour trading r√©el")
    print("=" * 60)
    
    # Logging avant cr√©ation du bot
    main_logger.info("üîÑ Cr√©ation de l'instance bot avec nouveau dashboard...")
    
    try:
        bot = EarlyBotTrading()
        main_logger.info("‚úÖ Instance bot cr√©√©e avec succ√®s!")
        main_logger.info("üåê D√©marrage du serveur Flask avec nouveau template...")
    except Exception as e:
        main_logger.error(f"‚ùå ERREUR lors de la cr√©ation du bot: {e}")
        import traceback
        main_logger.error(f"üìã Stack trace: {traceback.format_exc()}")
        exit(1)
    
    # D√©marrer l'application Flask
    try:
        app.run(host='0.0.0.0', port=8091, debug=False)
    except KeyboardInterrupt:
        print("\nüî¥ Arr√™t du bot demand√© par l'utilisateur")
        if bot:
            bot.stop_trading()
    except Exception as e:
        print(f"\n‚ùå Erreur serveur: {e}")
