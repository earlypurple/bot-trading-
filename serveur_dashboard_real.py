#!/usr/bin/env python3
"""
Serveur Complet pour le Dashboard du Bot de Trading Quantique
Version int√©gr√©e avec Early-Bot-Trading - PORTFOLIO R√âEL
"""
import os
import json
import time
import random
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from datetime import datetime, timedelta
import webbrowser

# Import du connecteur portfolio r√©el
try:
    from portfolio_connector import RealPortfolioConnector
    REAL_PORTFOLIO_AVAILABLE = True
    print("‚úÖ Connecteur portfolio r√©el import√©")
except ImportError as e:
    REAL_PORTFOLIO_AVAILABLE = False
    print(f"‚ö†Ô∏è Connecteur portfolio r√©el non disponible: {e}")

class QuantumTradingBotServer:
    """Serveur complet avec simulation du bot et de l'IA + PORTFOLIO R√âEL"""

    def __init__(self):
        self.bot_running = False
        self.start_time = None
        
        # Connecteur portfolio r√©el
        self.portfolio_connector = None
        if REAL_PORTFOLIO_AVAILABLE:
            try:
                self.portfolio_connector = RealPortfolioConnector()
                print("‚úÖ Connecteur portfolio r√©el initialis√©")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur initialisation portfolio r√©el: {e}")
                self.portfolio_connector = None

        # Donn√©es par d√©faut si pas de connexion r√©elle
        self.fallback_data = {
            'initial_capital': 10000.0,
            'current_equity': 10247.83,
            'daily_pnl': 247.83
        }

        # Positions simul√©es de fallback
        self.fallback_positions = [
            {
                'id': 1,
                'symbol': 'EURUSD',
                'side': 'LONG',
                'quantity': 1000,
                'entry_price': 1.1000,
                'current_price': 1.1025,
                'unrealized_pnl': 25.00,
                'strategy': 'Conservative',
                'entry_time': datetime.now() - timedelta(hours=2)
            },
            {
                'id': 2,
                'symbol': 'GBPUSD', 
                'side': 'SHORT',
                'quantity': 800,
                'entry_price': 1.2500,
                'current_price': 1.2485,
                'unrealized_pnl': 12.00,
                'strategy': 'Scalping',
                'entry_time': datetime.now() - timedelta(hours=1)
            },
            {
                'id': 3,
                'symbol': 'AUDUSD',
                'side': 'LONG', 
                'quantity': 1500,
                'entry_price': 0.6800,
                'current_price': 0.6815,
                'unrealized_pnl': 22.50,
                'strategy': 'ML Adaptive',
                'entry_time': datetime.now() - timedelta(minutes=30)
            }
        ]

        # Historique des trades
        self.trades_history = [
            {
                'symbol': 'USDJPY',
                'side': 'BUY',
                'pnl': 45.20,
                'time': '11:35',
                'strategy': 'Aggressive',
                'duration': '2.3min',
                'ai_confidence': 84
            },
            {
                'symbol': 'EURUSD',
                'side': 'SELL', 
                'pnl': -12.30,
                'time': '11:28',
                'strategy': 'Normal',
                'duration': '1.8min',
                'ai_confidence': 67
            },
            {
                'symbol': 'BTCUSD',
                'side': 'BUY',
                'pnl': 127.80,
                'time': '11:15',
                'strategy': 'ML Adaptatif',
                'duration': '8.4min',
                'ai_confidence': 91
            }
        ]

        # M√©triques IA
        self.ai_models = {
            'lstm': {'accuracy': 87.3, 'predictions': 245},
            'random_forest': {'accuracy': 72.1, 'signals': 189},
            'bert_sentiment': {'accuracy': 91.5, 'analyses': 512},
            'gbm_volatility': {'accuracy': 78.4, 'forecasts': 156}
        }

        # M√©triques quantiques
        self.quantum_metrics = {
            'superposition': 73.2,
            'entanglement': 82.5,
            'momentum': 65.8,
            'coherence': 89.4
        }

        # Sentiment de march√©
        self.market_sentiment = {
            'score': 0.23,
            'label': 'haussier',
            'confidence': 0.81,
            'emoji': 'üìà'
        }

        # Logs d'activit√©
        self.activity_logs = [
            {'timestamp': datetime.now(), 'message': 'ü§ñ Bot initialis√© - IA int√©gr√©e activ√©e', 'level': 'info'},
            {'timestamp': datetime.now(), 'message': '‚úÖ 4 mod√®les ML charg√©s avec succ√®s', 'level': 'success'},
            {'timestamp': datetime.now(), 'message': 'üî¨ Processeur quantique op√©rationnel', 'level': 'info'},
            {'timestamp': datetime.now(), 'message': 'üìä Connexion aux donn√©es de march√© √©tablie', 'level': 'info'}
        ]

        # Thread de mise √† jour
        self.update_thread = None

    def get_real_portfolio_data(self):
        """R√©cup√®re les vraies donn√©es du portefeuille"""
        if self.portfolio_connector:
            try:
                return self.portfolio_connector.format_for_frontend()
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur r√©cup√©ration portfolio r√©el: {e}")
                return None
        return None

    def get_financial_metrics(self):
        """Retourne les m√©triques financi√®res (r√©elles ou simul√©es)"""
        real_data = self.get_real_portfolio_data()
        
        if real_data and real_data.get('portfolio'):
            # Utilise les vraies donn√©es
            portfolio = real_data['portfolio']
            return {
                'current_equity': float(portfolio['total_equity']),
                'daily_pnl': float(portfolio['daily_pnl']),
                'positions_count': portfolio['positions_count'],
                'win_rate': portfolio['win_rate'],
                'trades_today': portfolio['trades_today'],
                'source': 'real'
            }
        else:
            # Fallback vers les donn√©es simul√©es
            return {
                'current_equity': self.fallback_data['current_equity'],
                'daily_pnl': self.fallback_data['daily_pnl'],
                'positions_count': len(self.fallback_positions),
                'win_rate': '72%',
                'trades_today': 12,
                'source': 'simulated'
            }

    def get_real_positions(self):
        """Retourne les vraies positions du portefeuille"""
        real_data = self.get_real_portfolio_data()
        
        if real_data and real_data.get('positions'):
            return real_data['positions']
        else:
            # Fallback vers positions simul√©es adapt√©es pour le frontend fran√ßais
            return [
                {
                    'display_name': 'BTC-EUR',
                    'symbol': 'BTC',
                    'quantity': '0.045',
                    'value_eur': '2156.78',
                    'price': '47928.44',
                    'pnl': '+127.45 ‚Ç¨',
                    'pnl_class': 'positive'
                },
                {
                    'display_name': 'ETH-EUR',
                    'symbol': 'ETH',
                    'quantity': '2.3',
                    'value_eur': '6632.40',
                    'price': '2884.52',
                    'pnl': '+89.32 ‚Ç¨',
                    'pnl_class': 'positive'
                },
                {
                    'display_name': 'USDC-EUR',
                    'symbol': 'USDC',
                    'quantity': '1458.65',
                    'value_eur': '1458.65',
                    'price': '1.00',
                    'pnl': '0.00 ‚Ç¨',
                    'pnl_class': 'neutral'
                }
            ]

    def start_bot(self):
        """D√©marre le bot"""
        if self.bot_running:
            return False

        self.bot_running = True
        self.start_time = datetime.now()

        # D√©marrage du thread de mise √† jour
        self.update_thread = threading.Thread(target=self._update_loop, daemon=True)
        self.update_thread.start()

        self.add_log('üöÄ Bot d√©marr√© avec succ√®s', 'success')
        self.add_log('üß† IA activ√©e - 4 mod√®les op√©rationnels', 'success')
        self.add_log('üî¨ Activation du processeur quantique', 'info')
        
        if self.portfolio_connector:
            self.add_log('üí∞ Portfolio r√©el connect√©', 'success')
        else:
            self.add_log('‚ö†Ô∏è Mode simulation - portfolio r√©el non disponible', 'warning')

        return True

    def stop_bot(self):
        """Arr√™te le bot"""
        if not self.bot_running:
            return False

        self.bot_running = False

        self.add_log('‚èπÔ∏è Arr√™t du bot demand√©', 'warning')
        self.add_log('üíæ Sauvegarde des donn√©es...', 'info')

        return True

    def _update_loop(self):
        """Boucle de mise √† jour en continu"""
        while self.bot_running:
            try:
                # Mise √† jour des m√©triques
                self._update_quantum_metrics()
                self._update_ai_models()

                # Si pas de portfolio r√©el, simule l'activit√©
                if not self.portfolio_connector:
                    self._update_financial_metrics()

                # Simulation d'activit√©
                if random.random() < 0.3:
                    self._simulate_trading_activity()

                time.sleep(5)  # Mise √† jour toutes les 5 secondes

            except Exception as e:
                self.add_log(f'‚ùå Erreur mise √† jour: {e}', 'error')
                time.sleep(5)

    def _update_financial_metrics(self):
        """Met √† jour les m√©triques financi√®res (simulation si pas de portfolio r√©el)"""
        if self.portfolio_connector:
            # Les vraies donn√©es sont r√©cup√©r√©es √† la demande
            return
        
        # Simulation pour les donn√©es de fallback
        equity_variation = (random.random() - 0.5) * 10
        self.fallback_data['current_equity'] += equity_variation

        pnl_variation = (random.random() - 0.5) * 5
        self.fallback_data['daily_pnl'] += pnl_variation

    def _update_quantum_metrics(self):
        """Met √† jour les m√©triques quantiques"""
        base_values = {
            'superposition': 73.2,
            'entanglement': 82.5,
            'momentum': 65.8
        }

        for key, base_value in base_values.items():
            variation = (random.random() - 0.5) * 10
            new_value = max(30, min(95, base_value + variation))
            self.quantum_metrics[key] = round(new_value, 1)

        # Coh√©rence globale
        avg_quantum = sum(list(self.quantum_metrics.values())[:3]) / 3
        self.quantum_metrics['coherence'] = round(avg_quantum + random.uniform(-5, 5), 1)

    def _update_ai_models(self):
        """Met √† jour les performances des mod√®les IA"""
        for model_name, model_data in self.ai_models.items():
            # Am√©lioration graduelle de la pr√©cision
            if random.random() < 0.05:  # 5% chance d'am√©lioration
                improvement = random.uniform(0.1, 0.3)
                model_data['accuracy'] = min(95.0, model_data['accuracy'] + improvement)

            # Augmentation des compteurs
            if 'predictions' in model_data:
                model_data['predictions'] += random.randint(0, 2)
            if 'signals' in model_data:
                model_data['signals'] += random.randint(0, 1)
            if 'analyses' in model_data:
                model_data['analyses'] += random.randint(0, 3)
            if 'forecasts' in model_data:
                model_data['forecasts'] += random.randint(0, 1)

    def _simulate_trading_activity(self):
        """Simule l'activit√© de trading"""
        activities = [
            'üìä Analyse BTC-EUR - Signal IA d√©tect√©',
            'üéØ Pr√©diction ML: ETH-EUR hausse probable', 
            '‚ö° Momentum quantique √©lev√© sur SOL-EUR',
            'üîç Scan des opportunit√©s sur 12 cryptos',
            'üìà Sentiment march√©: Haussier confirm√©',
            'ü§ñ Mod√®le LSTM recalibr√© automatiquement',
            'üíπ Nouvelle position: BTC-EUR via IA',
            '‚úÖ Stop-loss ajust√© par IA sur ETH-EUR',
            'üî¨ Corr√©lation quantique: BTC/ETH d√©tect√©e'
        ]

        activity = random.choice(activities)
        self.add_log(activity, 'info')

        # Simulation de nouveaux trades
        if random.random() < 0.1:  # 10% chance de nouveau trade
            pairs = ['BTC-EUR', 'ETH-EUR', 'SOL-EUR', 'ADA-EUR', 'DOT-EUR']
            sides = ['ACHAT', 'VENTE']
            strategies = ['Conservateur', 'Scalping', 'ML Adaptatif', 'Agressif']

            pair = random.choice(pairs)
            side = random.choice(sides)
            strategy = random.choice(strategies)
            pnl = (random.random() - 0.2) * 150  # Bias positif
            confidence = random.randint(65, 95)

            new_trade = {
                'symbol': f'{pair} {side}',
                'side': side,
                'pnl': pnl,
                'time': datetime.now().strftime('%H:%M'),
                'strategy': strategy,
                'duration': f'{random.uniform(0.5, 10):.1f}min',
                'ai_confidence': confidence
            }

            self.trades_history.insert(0, new_trade)

            # Garder seulement les 20 derniers
            if len(self.trades_history) > 20:
                self.trades_history = self.trades_history[:20]

            profit_indicator = '+' if pnl > 0 else ''
            self.add_log(f'üí∞ Trade IA: {pair} {side} | {profit_indicator}{pnl:.2f}‚Ç¨ | Conf: {confidence}%', 
                        'success' if pnl > 0 else 'warning')

    def add_log(self, message, level):
        """Ajoute une entr√©e au log"""
        entry = {
            'timestamp': datetime.now(),
            'message': message,
            'level': level
        }

        self.activity_logs.insert(0, entry)

        # Garder seulement les 100 derni√®res entr√©es
        if len(self.activity_logs) > 100:
            self.activity_logs = self.activity_logs[:100]

    def get_status(self):
        """Retourne le statut complet avec vraies donn√©es si disponibles"""
        # R√©cup√®re les m√©triques financi√®res (r√©elles ou simul√©es)
        financial_metrics = self.get_financial_metrics()
        
        return {
            'bot': {
                'is_running': self.bot_running,
                'start_time': self.start_time.isoformat() if self.start_time else None,
                'current_equity': financial_metrics['current_equity'],
                'daily_pnl': financial_metrics['daily_pnl'],
                'positions_count': financial_metrics['positions_count'],
                'win_rate': financial_metrics['win_rate'],
                'trades_today': financial_metrics['trades_today'],
                'data_source': financial_metrics['source'],
                'initial_capital': self.fallback_data['initial_capital'],
                'total_return_pct': round((financial_metrics['current_equity'] - self.fallback_data['initial_capital']) / self.fallback_data['initial_capital'] * 100, 2)
            },
            'positions': self.get_real_positions(),
            'trades_history': self.trades_history[:10],  # 10 derniers
            'ai_models': self.ai_models,
            'quantum_metrics': self.quantum_metrics,
            'market_sentiment': self.market_sentiment,
            'activity_logs': [
                {
                    'timestamp': log['timestamp'].isoformat(),
                    'message': log['message'],
                    'level': log['level']
                }
                for log in self.activity_logs[:20]  # 20 derni√®res
            ],
            'performance_stats': {
                'total_trades': len(self.trades_history),
                'winning_trades': len([t for t in self.trades_history if t['pnl'] > 0]),
                'win_rate': len([t for t in self.trades_history if t['pnl'] > 0]) / max(1, len(self.trades_history)),
                'avg_trade': sum(t['pnl'] for t in self.trades_history) / max(1, len(self.trades_history))
            },
            'timestamp': datetime.now().isoformat()
        }

# Instance globale du serveur
server_instance = QuantumTradingBotServer()

class DashboardHandler(BaseHTTPRequestHandler):
    """Handler pour le serveur HTTP"""

    def do_GET(self):
        if self.path in ['/', '/dashboard']:
            self._serve_dashboard()
        elif self.path == '/api/status':
            self._serve_status()
        elif self.path == '/api/portfolio/real':
            self._serve_real_portfolio()
        elif self.path == '/api/bot/start':
            self._start_bot()
        elif self.path == '/api/bot/stop':
            self._stop_bot()
        else:
            self.send_response(404)
            self.end_headers()

    def do_POST(self):
        if self.path == '/api/bot/start':
            self._start_bot()
        elif self.path == '/api/bot/stop':
            self._stop_bot()
        else:
            self.send_response(404)
            self.end_headers()

    def _serve_dashboard(self):
        """Sert le dashboard HTML"""
        try:
            # Chemin absolu vers le fichier HTML
            html_path = os.path.join(os.path.dirname(__file__), 'dashboard_complet.html')
            with open(html_path, 'r', encoding='utf-8') as f:
                html_content = f.read()

            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            self.wfile.write(html_content.encode('utf-8'))

        except FileNotFoundError:
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            error_html = f"<h1>‚ùå Dashboard non trouv√©</h1><p>Fichier recherch√©: {os.path.join(os.path.dirname(__file__), 'dashboard_complet.html')}</p>".encode('utf-8')
            self.wfile.write(error_html)

    def _serve_status(self):
        """API de statut"""
        status = server_instance.get_status()
        self._send_json(status)

    def _serve_real_portfolio(self):
        """API pour les donn√©es du portfolio r√©el"""
        real_data = server_instance.get_real_portfolio_data()
        if real_data:
            self._send_json({
                'success': True,
                'data': real_data,
                'timestamp': datetime.now().isoformat()
            })
        else:
            self._send_json({
                'success': False,
                'message': 'Portfolio r√©el non disponible',
                'timestamp': datetime.now().isoformat()
            })

    def _start_bot(self):
        """API pour d√©marrer le bot"""
        success = server_instance.start_bot()
        self._send_json({
            'success': success,
            'message': 'Bot d√©marr√© avec succ√®s' if success else 'Bot d√©j√† en cours',
            'timestamp': datetime.now().isoformat()
        })

    def _stop_bot(self):
        """API pour arr√™ter le bot"""
        success = server_instance.stop_bot()
        self._send_json({
            'success': success,
            'message': 'Bot arr√™t√© avec succ√®s',
            'timestamp': datetime.now().isoformat()
        })

    def _send_json(self, data):
        """Envoie une r√©ponse JSON"""
        self.send_response(200)
        self.send_header('Content-type', 'application/json; charset=utf-8')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()

        json_str = json.dumps(data, indent=2, default=str, ensure_ascii=False)
        self.wfile.write(json_str.encode('utf-8'))

    def log_message(self, format, *args):
        # Supprime les logs HTTP pour un affichage plus propre
        pass

def main():
    """Lance le serveur complet"""
    print("ü§ñ SERVEUR DASHBOARD COMPLET - BOT TRADING QUANTIQUE")
    print("=" * 70)
    print("üåê Interface web compl√®te avec bot et IA int√©gr√©s")
    print("üìä Dashboard professionnel temps r√©el")
    print("üß† 4 mod√®les IA + m√©triques quantiques")
    print("üí∞ Tracking P&L complet")
    print("üì± Design responsive moderne")
    
    if REAL_PORTFOLIO_AVAILABLE:
        print("üîó Portfolio r√©el Coinbase connect√©")
    else:
        print("‚ö†Ô∏è Mode simulation - Portfolio r√©el non disponible")
    
    print()

    try:
        server = HTTPServer(('localhost', 8080), DashboardHandler)

        print("‚úÖ Serveur d√©marr√© avec succ√®s !")
        print("üåê Dashboard disponible sur: http://localhost:8080")
        print()
        print("üéØ FONCTIONNALIT√âS COMPL√àTES:")
        print("  ‚Ä¢ Interface web interactive")
        print("  ‚Ä¢ Bot start/stop fonctionnel")
        print("  ‚Ä¢ IA avec 4 mod√®les en temps r√©el")
        print("  ‚Ä¢ M√©triques quantiques anim√©es")
        if REAL_PORTFOLIO_AVAILABLE:
            print("  ‚Ä¢ Portfolio r√©el Coinbase int√©gr√© ‚úÖ")
        else:
            print("  ‚Ä¢ Positions et trades simul√©s")
        print("  ‚Ä¢ Log d'activit√© en direct")
        print("  ‚Ä¢ Graphiques et analytics")
        print("  ‚Ä¢ Design responsive")
        print()
        print("üöÄ Ouverture automatique du navigateur...")

        # Ouverture automatique du navigateur
        try:
            webbrowser.open('http://localhost:8080')
            print("‚úÖ Navigateur ouvert automatiquement")
        except:
            print("‚ÑπÔ∏è  Ouvrez manuellement: http://localhost:8080")

        print()
        print("üèÉ‚Äç‚ôÇÔ∏è Serveur en cours d'ex√©cution...")
        print("‚ÑπÔ∏è  Appuyez sur Ctrl+C pour arr√™ter")
        print()

        server.serve_forever()

    except KeyboardInterrupt:
        print("\n‚ÑπÔ∏è  Arr√™t du serveur demand√©")
        if server_instance.bot_running:
            server_instance.stop_bot()
        print("üìä Dashboard ferm√© proprement")
    except Exception as e:
        print(f"\n‚ùå Erreur serveur: {e}")
        print("üí° V√©rifiez que le port 8080 est libre")
        input("Appuyez sur Entr√©e pour quitter...")

if __name__ == "__main__":
    main()
