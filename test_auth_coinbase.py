#!/usr/bin/env python3
"""
Test d'authentification Coinbase pour diagnostiquer l'erreur 401
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'config'))

import ccxt
from config.api_config import API_CONFIG

def test_auth():
    """Test l'authentification Coinbase step by step"""
    print("üîê TEST D'AUTHENTIFICATION COINBASE")
    print("=" * 50)
    
    credentials = {
        'apiKey': API_CONFIG['coinbase_api_key'],
        'secret': API_CONFIG['coinbase_api_secret'],
        'password': API_CONFIG['coinbase_passphrase'],
        'sandbox': False
    }
    
    print(f"üîë API Key: {credentials['apiKey'][:20]}...")
    print(f"üîê Passphrase: {credentials['password'][:20]}...")
    print(f"üìù Secret: {'*' * 20}")
    
    try:
        # Test 1: Cr√©ation simple de l'exchange
        print("\n1Ô∏è‚É£  Test cr√©ation exchange...")
        exchange = ccxt.coinbase(credentials)
        print("‚úÖ Exchange cr√©√©")
        
        # Test 2: Test endpoint public
        print("\n2Ô∏è‚É£  Test endpoint public...")
        try:
            markets = exchange.load_markets()
            print(f"‚úÖ March√©s charg√©s: {len(markets)} paires")
            
            # V√©rifier les paires USDC
            usdc_pairs = [symbol for symbol in markets if '/USDC' in symbol]
            print(f"‚úÖ Paires USDC disponibles: {len(usdc_pairs)}")
            if usdc_pairs:
                print(f"   Exemples: {', '.join(usdc_pairs[:5])}")
            
        except Exception as e:
            print(f"‚ùå Erreur march√©s: {e}")
        
        # Test 3: Test endpoint priv√© simple
        print("\n3Ô∏è‚É£  Test endpoint priv√© (balance)...")
        try:
            balance = exchange.fetch_balance()
            print("‚úÖ Balance r√©cup√©r√©e avec succ√®s")
            
            # Afficher les cryptos avec balance
            cryptos_with_balance = []
            for currency, amounts in balance.items():
                if currency not in ['info', 'free', 'used', 'total']:
                    total = amounts.get('total', 0)
                    if total > 0:
                        cryptos_with_balance.append(f"{currency}: {total}")
            
            print(f"üí∞ Cryptos avec balance: {len(cryptos_with_balance)}")
            for crypto in cryptos_with_balance[:10]:
                print(f"   {crypto}")
                
        except Exception as e:
            print(f"‚ùå Erreur balance: {e}")
            print(f"   Type d'erreur: {type(e).__name__}")
            
            # Analyser l'erreur sp√©cifiquement
            error_str = str(e)
            if "401" in error_str:
                print("   üö® PROBL√àME D'AUTHENTIFICATION D√âTECT√â")
                if "Unauthorized" in error_str:
                    print("   üí° Les credentials ne sont pas accept√©s par l'API")
                    print("   üîß ACTIONS √Ä V√âRIFIER:")
                    print("      1. V√©rifier que l'API key est bien active sur Coinbase")
                    print("      2. V√©rifier que les permissions 'view', 'trade', 'transfer' sont activ√©es")
                    print("      3. V√©rifier que l'API n'est pas en mode sandbox")
                    print("      4. V√©rifier la date/heure syst√®me (authentification bas√©e sur timestamp)")
            elif "403" in error_str:
                print("   üö® PROBL√àME DE PERMISSIONS")
                print("   üí° L'API key est valide mais n'a pas les bonnes permissions")
            
        # Test 4: Test d'info syst√®me
        print("\n4Ô∏è‚É£  Info syst√®me...")
        import time
        print(f"   Timestamp actuel: {int(time.time())}")
        print(f"   Version CCXT: {ccxt.__version__}")
        
        # Test 5: Test simple avec autre m√©thode
        print("\n5Ô∏è‚É£  Test m√©thode alternative...")
        try:
            # Essayer fetch_trading_fees (plus l√©ger)
            fees = exchange.fetch_trading_fees()
            print("‚úÖ Trading fees r√©cup√©r√©s")
        except Exception as e:
            print(f"‚ùå Erreur fees: {e}")
        
    except Exception as e:
        print(f"‚ùå ERREUR CR√âATION EXCHANGE: {e}")

if __name__ == "__main__":
    test_auth()
