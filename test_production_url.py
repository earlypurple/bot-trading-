#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test de la configuration URL de production
V√©rification que le bot utilise bien https://api.exchange.coinbase.com
"""

import ccxt
import sys
import os

# Ajouter le r√©pertoire parent pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config.api_config import API_CONFIG

def test_production_url():
    """Test que l'exchange utilise bien l'URL de production"""
    print("üîç TEST CONFIGURATION URL DE PRODUCTION")
    print("=" * 50)
    
    try:
        # Configuration avec URL explicite
        exchange = ccxt.coinbase({
            'apiKey': API_CONFIG['coinbase_api_key'],
            'secret': API_CONFIG['coinbase_api_secret'],
            'passphrase': API_CONFIG['coinbase_passphrase'],
            'sandbox': False,
            'enableRateLimit': True,
            # Force l'URL de production
            'urls': {
                'api': {
                    'public': 'https://api.exchange.coinbase.com',
                    'private': 'https://api.exchange.coinbase.com',
                }
            }
        })
        
        print(f"üåê URL configur√©e:")
        print(f"   Public API: {exchange.urls['api']['public']}")
        print(f"   Private API: {exchange.urls['api']['private']}")
        print()
        
        # Test de connexion
        print("üîå Test de connexion...")
        balance = exchange.fetch_balance()
        print("‚úÖ Connexion r√©ussie √† l'API PRODUCTION !")
        
        # Afficher les infos du compte
        usd_balance = balance.get('USD', {}).get('total', 0)
        print(f"üí∞ Solde USD: ${usd_balance:.2f}")
        
        # V√©rifier les march√©s disponibles
        markets = exchange.load_markets()
        print(f"üìà March√©s disponibles: {len(markets)}")
        
        # Test sp√©cifique avec un ticker pour confirmer l'API
        try:
            ticker = exchange.fetch_ticker('BTC/USD')
            print(f"‚Çø Prix BTC/USD: ${ticker['last']:.2f}")
            print()
            print("üéØ CONFIRMATION: Le bot utilise bien l'API PRODUCTION Coinbase !")
            print("üöÄ URL: https://api.exchange.coinbase.com")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur ticker: {e}")
            
    except Exception as e:
        print(f"‚ùå Erreur de configuration: {e}")
        
        # Si erreur, tester avec les URLs par d√©faut
        print("\nüîÑ Test avec configuration par d√©faut CCXT...")
        try:
            exchange_default = ccxt.coinbase({
                'apiKey': API_CONFIG['coinbase_api_key'],
                'secret': API_CONFIG['coinbase_api_secret'],
                'passphrase': API_CONFIG['coinbase_passphrase'],
                'sandbox': False,
                'enableRateLimit': True,
            })
            
            print(f"üåê URL par d√©faut:")
            print(f"   Public API: {exchange_default.urls['api']['public']}")
            print(f"   Private API: {exchange_default.urls['api']['private']}")
            
            balance = exchange_default.fetch_balance()
            print("‚úÖ Connexion alternative r√©ussie !")
            
        except Exception as e2:
            print(f"‚ùå Erreur connexion alternative: {e2}")
            print("\nüí° SOLUTION REQUISE:")
            print("   1. V√©rifiez que vous avez cr√©√© des cl√©s API depuis votre compte PRODUCTION Coinbase")
            print("   2. Les cl√©s doivent √™tre g√©n√©r√©es sur coinbase.com (pas coinbase-sandbox.com)")
            print("   3. Activez les permissions 'Trade' sur vos cl√©s API")

if __name__ == "__main__":
    test_production_url()
